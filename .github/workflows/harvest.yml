# .github/workflows/harvest.yml
name: Harvest Queue Times

# ────────────────────────────────
# Triggers
# ────────────────────────────────
on:
  # Every 30 minutes while the parks are (roughly) open in California (cron is UTC)
  schedule:
    - cron: "*/30 15-23 * * *"   # 08:00 – 15:30 PT
    - cron: "*/30 0-6  * * *"    # 17:00 – 23:30 PT
  workflow_dispatch:

# Ensure only one job at a time touches the DB branch
concurrency:
  group: queue-times-db
  cancel-in-progress: true

# ────────────────────────────────
# Job
# ────────────────────────────────
jobs:
  harvest:
    runs-on: ubuntu-latest

    steps:
    # 1️⃣  Check out the branch that stores the SQLite DB
    - name: Check out binary‑db‑updates
      uses: actions/checkout@v3
      with:
        fetch-depth: 0          # full history for rebase
        ref: binary-db-updates  # *** key change: start on the DB branch ***

    # 2️⃣  (Optional) Fast‑forward its code to main so the script is current
    - name: Sync branch with main (FF only)
      run: |
        git fetch origin main
        git merge --ff-only origin/main || echo "::warning ::main has diverged; leaving branch as‑is"

    # 3️⃣  Python runtime
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Install dependencies #use the same Python that was set up
      run: python -m pip install -r requirements.txt
        

    # 4️⃣  Run the harvester (this updates queue_times.db)
    - name: Harvest queue‑time data
      env:
        OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
      run: python queue_times.py

    # 5️⃣  Configure Git author
    - name: Configure Git
      run: |
        git config user.name  "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

    # 6️⃣  Commit only if the DB actually changed
    - name: Commit DB update (if any)
      run: |
        git add queue_times.db
        git diff --cached --quiet && { echo "No DB change – skipping commit"; exit 0; }
        git commit -m "Update SQLite DB: $(date -u +'%Y-%m-%d %H:%M:%S') UTC"

    # 7️⃣  Rebase (in case another job just pushed) and push safely
    - name: Rebase & push
      run: |
        git pull --rebase --autostash origin binary-db-updates
        git push --force-with-lease origin HEAD:binary-db-updates